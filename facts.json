[
  "C++ was created by Bjarne Stroustrup in 1979.",
  "The name 'C++' comes from the increment operator ++.",
  "C++ supports multiple programming paradigms including OOP and generic programming.",
  "STL provides data structures and algorithms out of the box.",
  "C++ is widely used in game engines like Unreal Engine.",
  "C++ is an extension of the C programming language.",
  "The first commercial release of C++ was in 1985.",
  "C++ supports both low-level and high-level programming.",
  "RAII (Resource Acquisition Is Initialization) is a core C++ idiom.",
  "Templates in C++ enable generic programming.",
  "C++ compilers include GCC, Clang, and MSVC.",
  "C++11 introduced smart pointers like unique_ptr and shared_ptr.",
  "C++ is often used for systems programming.",
  "Namespaces in C++ prevent name conflicts.",
  "C++ supports operator overloading.",
  "C++ is standardized by ISO (International Organization for Standardization).",
  "The latest major standard is C++20.",
  "C++23 is the upcoming revision after C++20.",
  "Virtual functions enable runtime polymorphism.",
  "Multiple inheritance is allowed in C++.",
  "The Standard Template Library (STL) includes containers, algorithms, and iterators.",
  "C++ supports function overloading.",
  "Inline functions in C++ suggest to the compiler to insert code directly.",
  "C++ provides manual memory management via new and delete.",
  "Move semantics were introduced in C++11.",
  "C++ supports both stack allocation and heap allocation.",
  "Friend functions can access private and protected members of a class.",
  "C++ supports exception handling using try, catch, and throw.",
  "C++ has strong support for type safety but allows casting.",
  "C++ is used in operating systems like Windows and macOS components.",
  "Const keyword in C++ makes variables immutable.",
  "C++ allows function templates for generic code.",
  "The auto keyword was enhanced in C++11 for type inference.",
  "C++ allows overloading of operators like +, -, and *.",
  "The STL vector is a dynamic array implementation.",
  "C++ provides references (&) alongside pointers.",
  "A destructor in C++ cleans up when an object is destroyed.",
  "Constructors initialize objects in C++.",
  "C++ supports static class members.",
  "C++ allows global functions outside of classes.",
  "Virtual destructors prevent memory leaks in inheritance hierarchies.",
  "The 'mutable' keyword allows modification of class members even in const objects.",
  "Static polymorphism can be achieved using templates.",
  "Dynamic polymorphism is achieved using virtual functions.",
  "The keyword 'explicit' prevents implicit conversions in constructors.",
  "C++ allows default function arguments.",
  "C++ provides preprocessor directives like #include and #define.",
  "Header files in C++ usually have a .h or .hpp extension.",
  "C++ supports inline namespaces since C++11.",
  "Lambda expressions were introduced in C++11.",
  "constexpr functions allow compile-time computation.",
  "C++17 introduced std::optional and std::variant.",
  "C++20 introduced concepts for template constraints.",
  "C++ supports bit manipulation for low-level programming.",
  "std::thread introduced in C++11 enables multithreading.",
  "The keyword 'volatile' tells the compiler not to optimize a variable.",
  "C++ supports multiple file compilation via header and source files.",
  "A class in C++ can have private, protected, and public sections.",
  "Structs in C++ are similar to classes but default to public members.",
  "C++ allows abstract classes with pure virtual functions.",
  "std::map in STL is an ordered key-value container.",
  "std::unordered_map in STL is a hash-based container.",
  "std::array in C++11 provides a fixed-size array wrapper.",
  "std::list is a doubly-linked list in STL.",
  "std::stack and std::queue are container adapters in STL.",
  "std::priority_queue is a max-heap by default in STL.",
  "C++ supports type casting with static_cast, dynamic_cast, and reinterpret_cast.",
  "C++ allows operator new to be overloaded.",
  "Placement new allows constructing objects at a specific memory location.",
  "C++ allows defining macros with #define.",
  "C++ supports conditional compilation with #ifdef and #endif.",
  "The main() function is the entry point of C++ programs.",
  "C++ allows inline assembly in some compilers.",
  "Templates can be specialized for specific types.",
  "Variadic templates were introduced in C++11.",
  "C++ supports design patterns like Singleton and Factory.",
  "C++ allows bitfields in structs for compact storage.",
  "C++ can interface with C libraries via extern \"C\".",
  "std::string in STL manages dynamic strings.",
  "Wide strings are supported with std::wstring.",
  "std::chrono in C++11 provides time utilities.",
  "C++ supports static_assert for compile-time assertions.",
  "The delete keyword can disable functions in C++11.",
  "std::move enables transfer of resources without copying.",
  "C++ supports pointers to functions.",
  "C++ allows overloading of new and delete operators globally or per class.",
  "std::unique_ptr enforces single ownership of resources.",
  "std::shared_ptr allows multiple owners of a resource.",
  "std::weak_ptr avoids circular references in shared_ptr.",
  "C++ supports recursive functions.",
  "C++ supports range-based for loops since C++11.",
  "C++17 introduced structured bindings for tuple unpacking.",
  "C++20 introduced coroutines for asynchronous programming.",
  "C++ supports dynamic memory allocation with malloc and free via C compatibility.",
  "std::future and std::promise support async programming in C++11.",
  "C++ supports enumerations with enum and enum class.",
  "C++ has typeid and RTTI (Run Time Type Information).",
  "C++ supports defaulted and deleted special member functions.",
  "std::filesystem in C++17 provides file system utilities.",
  "C++ provides undefined behavior in many cases, requiring caution.",
  "C++ is widely used in embedded systems due to performance and control.",
  "C++ is used in financial systems like trading platforms for speed.",
  "C++ supports function pointers for callback mechanisms.",
  "std::bind in C++11 allows partial function application.",
  "C++ supports namespaces to organize code and prevent name clashes.",
  "std::tuple allows grouping of heterogeneous values.",
  "C++ allows overloading of constructors.",
  "The rule of three involves destructor, copy constructor, and copy assignment operator.",
  "The rule of five extends it with move constructor and move assignment.",
  "The rule of zero encourages avoiding manual resource management by using RAII.",
  "C++11 introduced delegating constructors.",
  "C++ supports initializer lists for array-like initialization.",
  "C++17 introduced if constexpr for compile-time branching.",
  "C++ allows static local variables inside functions.",
  "A virtual table (vtable) supports dynamic dispatch in C++.",
  "C++ supports explicit type conversion with cast operators.",
  "std::set in STL stores unique elements in order.",
  "std::multiset allows duplicate elements in order.",
  "std::multimap allows duplicate keys in key-value pairs.",
  "C++ allows bitwise operators like &, |, ^, <<, >>.",
  "C++ allows short-circuiting in logical operators && and ||.",
  "C++ supports character literals like 'a' and wide characters like L'a'.",
  "C++ allows raw string literals using R\"(text)\" syntax.",
  "C++ allows Unicode string literals with u8, u, and U prefixes.",
  "C++ provides scope resolution operator ::.",
  "C++ allows static class functions to be called without an object.",
  "C++ has function-like macros using #define.",
  "C++ supports conditional operator (ternary operator).",
  "C++ allows defining inline variables since C++17.",
  "C++ supports template metaprogramming.",
  "C++ has compile-time constants using constexpr and consteval.",
  "C++ allows user-defined literals since C++11.",
  "C++ supports reference collapsing rules for templates.",
  "C++ allows rvalue references for move semantics.",
  "C++ has std::any for type-erased containers since C++17.",
  "C++ provides std::variant as a type-safe union.",
  "C++ supports std::visit to apply functions on variants.",
  "C++ allows overloading operator() for functor objects.",
  "C++ supports std::function for storing callable entities.",
  "C++17 introduced std::string_view for non-owning string references.",
  "C++ provides std::aligned_storage and alignas keyword for alignment control.",
  "C++ allows noexcept to specify functions that do not throw exceptions.",
  "C++17 introduced inline variables.",
  "C++ supports conditional noexcept for template functions.",
  "C++ allows friend classes to access private members.",
  "C++ supports static casts at compile-time checks.",
  "C++ allows dynamic_cast for safe downcasting.",
  "C++ allows reinterpret_cast for low-level type conversions.",
  "C++ provides type traits in <type_traits> for compile-time reflection.",
  "C++17 introduced std::optional for nullable values.",
  "C++ supports std::hash for hashing user-defined types.",
  "C++ allows operator overloading for stream insertion << and extraction >>.",
  "C++ supports manipulators like std::endl and std::setw.",
  "C++ streams include std::cin, std::cout, and std::cerr.",
  "C++ supports file handling with fstream, ifstream, and ofstream.",
  "C++ provides stringstream for parsing and formatting strings.",
  "C++ allows formatted I/O with printf via C compatibility.",
  "C++ supports compile-time evaluations with constexpr variables.",
  "C++17 introduced fold expressions for variadic templates.",
  "C++ provides standard algorithms like std::sort, std::find, and std::accumulate.",
  "C++ supports iterator categories: input, output, forward, bidirectional, and random access.",
  "C++ provides reverse iterators with rbegin() and rend().",
  "C++11 introduced range-based for loops for iterating over containers.",
  "C++ supports iterators as generalized pointers.",
  "C++ algorithms can work on any container supporting iterators.",
  "C++ provides std::copy, std::transform, and std::for_each algorithms.",
  "C++ allows user-defined exception classes.",
  "C++ supports rethrowing exceptions using throw; inside catch.",
  "C++ exceptions are not checked by the compiler unlike Java.",
  "C++ provides standard exception classes like std::runtime_error and std::logic_error.",
  "C++ allows stack unwinding when exceptions occur.",
  "C++ supports noexcept specifier to declare non-throwing functions.",
  "C++ supports assert macro for debugging.",
  "C++ provides debugging utilities via <cassert>.",
  "C++ supports conditional compilation for cross-platform code.",
  "C++ supports precompiled headers for faster compilation.",
  "C++ supports link-time optimization for performance.",
  "C++ allows inlining across translation units with link-time optimization.",
  "C++ supports constexpr constructors since C++11.",
  "C++ provides aggregate initialization for structs.",
  "C++17 introduced structured binding for tuple-like types.",
  "C++ supports capturing variables in lambdas by value or reference.",
  "C++ allows generic lambdas since C++14.",
  "C++20 introduced lambdas in unevaluated contexts.",
  "C++ allows templates with default arguments.",
  "C++ supports template template parameters.",
  "C++ provides CRTP (Curiously Recurring Template Pattern).",
  "C++ allows SFINAE (Substitution Failure Is Not An Error).",
  "C++17 introduced if constexpr for template specialization.",
  "C++20 introduced concepts for cleaner template constraints.",
  "C++ allows operator overloading for [] in classes.",
  "C++ supports move constructors to optimize temporary objects.",
  "C++ provides copy elision optimization.",
  "C++17 guaranteed return value optimization (RVO).",
  "C++ allows structured exception handling in Windows compilers.",
  "C++ supports union types for overlapping storage.",
  "C++ allows anonymous unions inside classes.",
  "C++ supports polymorphic allocators with std::pmr namespace.",
  "C++20 introduced std::span as a view over arrays.",
  "C++ supports three-way comparison operator (<=>) since C++20.",
  "C++ provides spaceship operator for automatic ordering.",
  "C++20 introduced modules for faster compilation.",
  "C++ allows coroutines with co_await, co_yield, and co_return.",
  "C++ supports execution policies for parallel algorithms in C++17.",
  "C++ supports partial specialization of templates.",
  "C++ allows nested classes inside other classes.",
  "C++ supports virtual inheritance to avoid diamond problem.",
  "C++ provides std::unique_lock for flexible locking.",
  "C++ supports condition variables for thread synchronization.",
  "C++ provides atomic operations with <atomic>.",
  "C++ supports memory_order for fine-grained atomic control.",
  "C++ supports lock-free programming with atomics.",
  "C++ provides std::mutex for mutual exclusion.",
  "C++ allows recursive_mutex for reentrant locking.",
  "C++ supports shared_mutex for reader-writer locking.",
  "C++ allows threads to be detached or joined.",
  "C++ provides std::thread::hardware_concurrency() to query cores.",
  "C++ supports thread-local storage with thread_local keyword.",
  "C++ provides future and promise for asynchronous communication.",
  "C++ allows packaged_task to wrap functions for async execution.",
  "C++ supports std::async for launching tasks.",
  "C++ provides std::condition_variable_any for generic locking.",
  "C++ supports chrono durations like milliseconds and nanoseconds.",
  "C++ allows steady_clock and system_clock for time measurement.",
  "C++ supports high_resolution_clock for precise timing.",
  "C++ provides filesystem utilities for path manipulation.",
  "C++ allows checking file existence with std::filesystem::exists.",
  "C++ supports creating directories with std::filesystem::create_directory.",
  "C++ provides remove and rename functions in filesystem.",
  "C++ supports symbolic links with filesystem utilities.",
  "C++ provides recursive directory iterators.",
  "C++ supports absolute and relative paths.",
  "C++ provides file size retrieval with filesystem.",
  "C++ allows querying last write time of files.",
  "C++ provides exception-safe filesystem operations.",
  "C++ supports wide-character streams like wcout and wcin.",
  "C++ allows imbue for locale-specific formatting.",
  "C++ supports facets for locale customization.",
  "C++ provides numeric_limits for type properties.",
  "C++ allows querying max, min, and epsilon values of types.",
  "C++ provides random number generators in <random>.",
  "C++ supports uniform_int_distribution and normal_distribution.",
  "C++ provides mersenne_twister_engine as a random engine.",
  "C++ supports seeding RNGs with random_device.",
  "C++ provides shuffle algorithm for randomizing containers.",
  "C++ supports generating random booleans with bernoulli_distribution.",
  "C++ provides geometric, binomial, and poisson distributions.",
  "C++ allows deterministic random engines with fixed seeds.",
  "C++ supports hashing strings and integers with std::hash.",
  "C++ allows custom hash functions for unordered containers.",
  "C++ provides std::equal for comparing ranges.",
  "C++ supports std::mismatch to find differing elements.",
  "C++ provides std::lexicographical_compare for ranges.",
  "C++ supports std::is_sorted and std::sort for ordering.",
  "C++ provides stable_sort for preserving equal element order.",
  "C++ allows partial_sort for top-k elements.",
  "C++ supports nth_element for median finding.",
  "C++ provides heap algorithms like make_heap and push_heap.",
  "C++ supports pop_heap and sort_heap.",
  "C++ provides lower_bound and upper_bound for binary search.",
  "C++ supports equal_range for range queries.",
  "C++ allows binary_search in sorted containers.",
  "C++ supports set operations like set_union and set_intersection.",
  "C++ provides includes to check subset relationships.",
  "C++ supports merge for combining sorted ranges.",
  "C++ provides inplace_merge for merging within one container.",
  "C++ supports rotate algorithm for shifting ranges.",
  "C++ provides unique to remove duplicates in ranges.",
  "C++ supports remove_if for conditional removals.",
  "C++ provides transform for applying functions to ranges.",
  "C++ supports accumulate for reductions.",
  "C++ provides inner_product for vector dot products.",
  "C++ supports adjacent_difference for computing differences.",
  "C++ provides partial_sum for prefix sums.",
  "C++ allows iota to generate sequences of numbers.",
  "C++ supports generate and generate_n algorithms.",
  "C++ provides for_each_n in C++17.",
  "C++ allows clamp to restrict values between bounds.",
  "C++ supports reduce and transform_reduce in C++17.",
  "C++ provides exclusive_scan and inclusive_scan in C++17.",
  "C++ supports is_permutation for checking permutations.",
  "C++ provides next_permutation and prev_permutation.",
  "C++ supports shuffle for random reordering.",
  "C++ allows sample to randomly select elements.",
  "C++ provides is_heap and is_sorted for checks.",
  "C++ supports min_element and max_element.",
  "C++ provides minmax_element for both min and max.",
  "C++ supports adjacent_find to detect duplicates.",
  "C++ provides find_if and find_if_not.",
  "C++ supports count and count_if.",
  "C++ provides search for subsequences.",
  "C++ supports find_end for last occurrence of a subsequence.",
  "C++ provides search_n for repeated elements.",
  "C++ allows ranges to be combined with views in C++20.",
  "C++ provides ranges::filter_view and transform_view.",
  "C++20 introduced ranges::iota_view and take_view.",
  "C++ provides ranges::zip_view for parallel iteration.",
  "C++ supports ranges::join_view for flattening.",
  "C++ allows lazy evaluation with ranges pipelines.",
  "C++20 ranges improve composability of algorithms.",
  "C++ supports span as a lightweight array view.",
  "C++ allows borrowing containers with ranges.",
  "C++ provides projections for algorithms since C++20.",
  "C++ supports ranges-based for loops with custom views.",
  "C++23 introduced std::expected for error handling.",
  "C++ provides std::deque as a double-ended queue container.",
  "C++ supports random access in std::vector but not in std::list.",
  "C++ allows emplace functions to construct elements in place.",
  "C++ provides reserve to preallocate memory in vectors.",
  "C++ supports shrink_to_fit to reduce vector capacity.",
  "C++ allows capacity queries in containers.",
  "C++ provides size, empty, and max_size for container checks.",
  "C++ supports insert and erase in containers.",
  "C++ allows splice operations in std::list.",
  "C++ supports merge and sort for lists.",
  "C++ provides swap for container swapping.",
  "C++ allows clear to empty containers.",
  "C++ supports assign to replace container contents.",
  "C++ provides back_inserter and front_inserter iterators.",
  "C++ allows inserter for arbitrary positions.",
  "C++ supports reverse iterators for all containers.",
  "C++ provides custom allocators for memory control.",
  "C++ allows polymorphic allocators in C++17.",
  "C++ supports memory resource management with pmr namespace.",
  "C++ allows aligned memory allocation with aligned_alloc.",
  "C++ provides allocator_traits for allocator customization.",
  "C++ supports node-based containers like map and set.",
  "C++ provides order statistics with balanced trees.",
  "C++ supports heterogeneous lookup in associative containers.",
  "C++ allows transparent comparators with std::less<>.",
  "C++ provides heterogeneous search in unordered containers.",
  "C++ supports bucket_count queries in hash containers.",
  "C++ allows load_factor adjustments in hash containers.",
  "C++ supports rehashing in unordered containers.",
  "C++ provides reserve for unordered containers.",
  "C++ allows element-wise comparison of containers.",
  "C++ supports relational operators for STL containers.",
  "C++ provides structured binding for map elements.",
  "C++ allows range-based insertion from initializer_list.",
  "C++ supports emplace_hint in associative containers.",
  "C++ provides extract and merge for node handles.",
  "C++ allows transparent insert_or_assign in maps.",
  "C++ supports try_emplace for efficient insertion.",
  "C++ provides heterogeneous lookup with find.",
  "C++ allows equal_range in associative containers.",
  "C++ supports count and contains in C++20.",
  "C++ provides heterogeneous erase operations.",
  "C++ supports heterogeneous insertions.",
  "C++ provides node handles for advanced manipulation.",
  "C++ supports tuple_cat for concatenating tuples.",
  "C++ provides tie for unpacking tuples.",
  "C++ supports ignore to skip tuple elements.",
  "C++ provides make_pair and make_tuple.",
  "C++ supports piecewise_construct for pair construction.",
  "C++ provides std::get for tuple access.",
  "C++ supports index sequences with std::index_sequence.",
  "C++ allows tuple_element to query tuple types.",
  "C++ provides tuple_size for compile-time size queries.",
  "C++ supports tuple comparisons with operators.",
  "C++ allows swapping tuples directly.",
  "C++ provides std::apply to call functions with tuples.",
  "C++ supports lambda captures by move since C++14.",
  "C++ allows init-captures in lambdas.",
  "C++ supports generic lambdas with auto parameters.",
  "C++ provides constexpr lambdas in C++17.",
  "C++ supports recursive lambdas with std::function.",
  "C++ allows mutable lambdas to modify captures.",
  "C++ supports stateless lambdas convertible to function pointers.",
  "C++ provides default capture modes by value or reference.",
  "C++ supports capturing this pointer in lambdas.",
  "C++ allows capturing structured bindings in C++20.",
  "C++ provides fold expressions for pack expansions.",
  "C++ supports pack expansions in lambda captures.",
  "C++ allows parameter packs in templates.",
  "C++ provides sizeof... to count parameter packs.",
  "C++ supports forwarding references with T&&.",
  "C++ allows perfect forwarding with std::forward.",
  "C++ provides decay type trait for function arguments.",
  "C++ supports enable_if for template specialization.",
  "C++ allows requires clauses in C++20 for concepts.",
  "C++ supports constrained templates with concepts.",
  "C++ allows defining custom concepts with requires expressions.",
  "C++ provides conjunction and disjunction traits.",
  "C++ supports negation trait for type logic.",
  "C++ provides is_same and is_base_of traits.",
  "C++ supports is_convertible and is_constructible traits.",
  "C++ allows is_trivially_copyable checks.",
  "C++ provides is_standard_layout checks.",
  "C++ supports is_pod in older standards (deprecated now).",
  "C++ allows alignment checks with is_aligned.",
  "C++ provides remove_reference and remove_pointer traits.",
  "C++ supports add_const and add_pointer traits.",
  "C++ provides conditional trait for type selection.",
  "C++ supports invoke_result to deduce return types.",
  "C++ provides void_t for SFINAE patterns.",
  "C++ supports is_invocable traits for callables.",
  "C++ provides declval for unevaluated contexts.",
  "C++ supports dependent names with typename keyword.",
  "C++ allows template aliases with using keyword.",
  "C++ provides alias templates for cleaner code.",
  "C++ supports type deduction guides for class templates.",
  "C++ allows class template argument deduction (CTAD).",
  "C++ provides deduction guides for containers.",
  "C++ supports aggregate deduction since C++17.",
  "C++ provides constexpr constructors in C++20.",
  "C++ allows trivial default constructors.",
  "C++ supports default member initializers.",
  "C++ supports delegating constructors to simplify initialization.",
  "C++ allows base class initializer lists.",
  "C++ supports constructor inheritance since C++11.",
  "C++ allows explicit default and delete for special members.",
  "C++ provides copy constructors for object duplication.",
  "C++ supports shallow and deep copies.",
  "C++ allows private constructors for Singleton patterns.",
  "C++ supports static member initialization inside classes since C++17.",
  "C++ provides in-class member initializers.",
  "C++ supports uniform initialization with braces.",
  "C++ allows narrowing conversions to be flagged as errors in brace init.",
  "C++ provides aggregate initialization for structs.",
  "C++ supports designated initializers since C++20.",
  "C++ allows zero-initialization of POD types.",
  "C++ provides defaulted destructors.",
  "C++ supports virtual destructors for polymorphic cleanup.",
  "C++ allows pure virtual destructors with definitions.",
  "C++ supports inline destructors.",
  "C++ provides sequence points to define evaluation order.",
  "C++ allows unspecified order of evaluation for function arguments.",
  "C++ supports undefined behavior in multiple scenarios.",
  "C++ provides implementation-defined behavior for some cases.",
  "C++ allows unspecified signed integer overflow.",
  "C++ supports two’s complement on most platforms.",
  "C++ provides fixed-width integer types in <cstdint>.",
  "C++ supports int8_t, int16_t, int32_t, and int64_t.",
  "C++ allows unsigned and signed integer types.",
  "C++ provides size_t for sizes and indexes.",
  "C++ supports ptrdiff_t for pointer arithmetic results.",
  "C++ provides nullptr keyword since C++11.",
  "C++ supports NULL from C for backward compatibility.",
  "C++ provides std::nullptr_t as nullptr type.",
  "C++ allows pointer arithmetic on arrays.",
  "C++ supports array-to-pointer decay.",
  "C++ provides const_cast to remove const qualifiers.",
  "C++ allows volatile_cast in some compilers (non-standard).",
  "C++ supports reinterpret_cast for raw bit conversions.",
  "C++ provides function pointers for callbacks.",
  "C++ supports lambdas as function objects.",
  "C++ allows capturing move-only types in lambdas.",
  "C++ supports stateless lambdas convertible to function pointers.",
  "C++ provides lambda templates since C++20.",
  "C++ supports constexpr lambdas in C++17.",
  "C++ allows dynamic memory allocation with new.",
  "C++ supports array allocation with new[].",
  "C++ allows custom allocators for memory management.",
  "C++ provides delete and delete[] for deallocation.",
  "C++ supports placement new for custom memory placement.",
  "C++ allows overriding operator new per class.",
  "C++ supports aligned new for custom alignment.",
  "C++ provides memory management utilities in <memory>.",
  "C++ supports std::allocator for STL containers.",
  "C++ provides uninitialized_copy and uninitialized_fill.",
  "C++ supports std::construct_at and std::destroy_at.",
  "C++ allows polymorphic memory resources in C++17.",
  "C++ supports std::pmr::vector and pmr containers.",
  "C++ provides memory pools via custom allocators.",
  "C++ supports atomic operations for concurrency.",
  "C++ provides std::atomic for lock-free types.",
  "C++ supports memory_order_seq_cst for sequential consistency.",
  "C++ allows weaker memory orders for optimization.",
  "C++ provides atomic_flag as the simplest atomic type.",
  "C++ supports compare_exchange for CAS operations.",
  "C++ provides fetch_add and fetch_sub for atomics.",
  "C++ supports atomic smart pointers since C++20.",
  "C++ allows lock-free property queries on atomics.",
  "C++ provides thread synchronization primitives.",
  "C++ supports condition_variable for signaling.",
  "C++ provides notify_one and notify_all for conditions.",
  "C++ supports std::barrier for thread synchronization in C++20.",
  "C++ allows std::latch for countdown synchronization.",
  "C++ provides atomic wait and notify in C++20.",
  "C++ supports jthread for RAII thread management in C++20.",
  "C++ provides stop_token for cooperative cancellation.",
  "C++ supports async tasks with std::async.",
  "C++ provides packaged_task for deferred execution.",
  "C++ supports promise-future pairs for result passing.",
  "C++ provides shared_future for multiple consumers.",
  "C++ supports coroutine tasks with co_await in C++20.",
  "C++ provides generator coroutines with co_yield.",
  "C++ supports resumable coroutines with co_return.",
  "C++ allows user-defined allocators for coroutines.",
  "C++ supports symmetric coroutines via libraries.",
  "C++ provides cooperative multitasking with coroutines.",
  "C++ allows exception handling in coroutines.",
  "C++ supports awaitable objects with operator co_await.",
  "C++ provides default exception handling for coroutines.",
  "C++ supports cancellation via stop_token in coroutines.",
  "C++ provides ranges library for functional pipelines.",
  "C++ supports views for lazy range transformations.",
  "C++ provides ranges::filter_view for filtering.",
  "C++ supports ranges::transform_view for mapping.",
  "C++ provides ranges::take and drop for slicing.",
  "C++ supports ranges::join_view for flattening.",
  "C++ provides zip_view for parallel iteration.",
  "C++ supports ranges adaptors with | operator.",
  "C++ provides compile-time range size queries.",
  "C++ supports concepts for range constraints.",
  "C++ provides std::expected in C++23 for error handling.",
  "The standard C++ library is split into multiple headers like <iostream>, <vector>, <map>, etc.",
  "C++ allows multiple inheritance, unlike Java which only allows single inheritance for classes.",
  "Polymorphism in C++ can be static (compile-time) or dynamic (runtime).",
  "Virtual functions in C++ enable runtime polymorphism.",
  "A pure virtual function makes a class abstract in C++.",
  "Abstract classes in C++ cannot be instantiated directly.",
  "Interfaces in C++ are implemented using abstract classes with only pure virtual functions.",
  "Friend functions in C++ break encapsulation but are sometimes necessary.",
  "C++ supports both operator overloading and function overloading.",
  "Operator overloading in C++ allows redefining operators like +, -, *, and [] for user-defined types.",
  "Dynamic memory in C++ should be released with delete to prevent memory leaks.",
  "The delete[] operator is used for deallocating arrays allocated with new[].",
  "Dangling pointers occur when a pointer references a deleted or invalid memory location.",
  "Smart pointers like unique_ptr and shared_ptr solve dangling pointer issues.",
  "C++11 introduced move semantics to optimize temporary object handling.",
  "Move constructors reduce unnecessary deep copies in C++.",
  "C++ introduced rvalue references (&&) to support move semantics.",
  "C++ constexpr allows computations at compile time.",
  "C++ auto keyword deduces variable types automatically.",
  "C++ decltype keyword can deduce the type of an expression.",
  "Structured bindings were introduced in C++17 to unpack tuples or structs.",
  "Lambda expressions were introduced in C++11 to create inline anonymous functions.",
  "C++ lambdas can capture variables by value or reference.",
  "Generic lambdas with auto parameters were introduced in C++14.",
  "C++ STL iterators provide a uniform way to traverse containers.",
  "Input iterators can only read values, while output iterators can only write values.",
  "Bidirectional iterators allow moving both forward and backward in a container.",
  "Random-access iterators support direct indexing like pointers.",
  "STL algorithms are designed to work with iterators, not specific containers.",
  "C++ templates are compiled separately for each type instantiation.",
  "Template metaprogramming allows computations during compile time.",
  "Variadic templates allow functions to take variable numbers of template parameters.",
  "SFINAE (Substitution Failure Is Not An Error) is used for template specialization.",
  "CRTP (Curiously Recurring Template Pattern) is a template-based design pattern.",
  "Namespaces prevent name collisions in large projects.",
  "The std namespace contains most of the standard library symbols.",
  "Inline namespaces were introduced in C++11 for versioning APIs.",
  "Unnamed namespaces replace static keyword for internal linkage.",
  "Header guards or #pragma once prevent multiple inclusions of headers.",
  "The 'mutable' keyword allows modification of class members even in const objects.",
  "C++ supports function pointers for callback mechanisms.",
  "std::function provides type-safe, flexible function wrappers.",
  "std::bind can bind arguments to functions for partial application.",
  "C++17 introduced std::optional for representing nullable values.",
  "std::variant is a type-safe union introduced in C++17.",
  "std::any can hold any type with type erasure.",
  "C++ coroutines were standardized in C++20.",
  "std::future and std::promise enable multithreaded synchronization.",
  "std::async can run tasks in separate threads easily."
]
